package moon.numbers.random;

import haxe.io.Bytes;
import moon.core.Char;
import moon.numbers.random.Random;

/**
 * Usage:
 * // Instantiate whatever random generator and assign to Random type.
 * var rnd:Random = new NativeRandom();
 * rnd.create.string(5, "abc");
 * 
 * @author Munir Hussin
 */
abstract RandomCreate(Random) to Random from Random
{
    /*==================================================
        Methods
    ==================================================*/
    
    /**
     * Creates a string filled with random chars
     * @param len       the number of generated characters
     * @param chars     a string containing possible chars
     * @return          a random string of len `len`
     */
    public function string(len:Int, ?chars:String):String
    {
        if (chars == null)
            chars = Char.generate("", "", AlphaNumeric);
        
        var sbuf:StringBuf = new StringBuf();
        var n:Int = chars.length;
        
        for (i in 0...len)
        {
            sbuf.add(chars.charAt(this.below(n)));
        }
        
        return sbuf.toString();
    }
    
    /**
     * Creates an array of len `len` filled with randomly selected choices.
     * @param len       the length of the generated array
     * @param choices   an array containing possible values
     * @return          a random array
     */
    public function array<T>(len:Int, choices:Array<T>):Array<T>
    {
        if (choices == null)
            throw "Cannot generate random array without a valid list";
        
        var ret:Array<T> = [];
        var n:Int = choices.length;
        
        for (i in 0...len)
        {
            ret.push(choices[this.below(n)]);
        }
        
        return ret;
    }
    
    /**
     * Creates a byte array of len `len` filled with random bytes.
     * @param len       the number of generated bytes
     * @return          random bytes
     */
    public function bytes(len:Int):Bytes
    {
        var b:Bytes = Bytes.alloc(len);
        for (i in 0...len) b.set(i, this.below(256));
        return b;
    }
}
